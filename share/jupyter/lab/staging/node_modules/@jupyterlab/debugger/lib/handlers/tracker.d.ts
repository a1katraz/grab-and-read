import { JupyterFrontEnd } from '@jupyterlab/application';
import { IWidgetTracker, MainAreaWidget } from '@jupyterlab/apputils';
import { CodeEditorWrapper, IEditorServices } from '@jupyterlab/codeeditor';
import { IConsoleTracker } from '@jupyterlab/console';
import { IEditorTracker } from '@jupyterlab/fileeditor';
import { INotebookTracker } from '@jupyterlab/notebook';
import { Token } from '@lumino/coreutils';
import { IDisposable } from '@lumino/disposable';
import { IDebugger } from '../tokens';
/**
 * A class which handles notebook, console and editor trackers.
 */
export declare class TrackerHandler implements IDisposable {
    /**
     * Instantiate a new TrackerHandler.
     * @param options The instantiation options for a TrackerHandler.
     */
    constructor(options: TrackerHandler.IOptions);
    /**
     * Whether the handler is disposed.
     */
    isDisposed: boolean;
    /**
     * Dispose the handler.
     */
    dispose(): void;
    /**
     * Handle when the debug model changes.
     */
    private _onModelChanged;
    /**
     * Handle a current frame changed event.
     * @param _ The sender.
     * @param frame The current frame.
     */
    private _onCurrentFrameChanged;
    /**
     * Handle a source open event.
     * @param _ The sender.
     * @param source The source to open.
     */
    private _onCurrentSourceOpened;
    /**
     * Find the editor for a source matching the current debug session
     * by iterating through all the widgets in each of the notebook,
     * console, file editor, and read-only file editor trackers.
     * @param debugSessionPath The path for the current debug session.
     * @param source The source to find.
     */
    private _find;
    /**
     * Find the editor for a source matching the current debug session
     * from the notebook tracker.
     * @param debugSessionPath The path for the current debug session.
     * @param source The source to find.
     */
    private _findInNotebooks;
    /**
     * Find the editor for a source matching the current debug session
     * from the console tracker.
     * @param debugSessionPath The path for the current debug session.
     * @param source The source to find.
     */
    private _findInConsoles;
    /**
     * Find the editor for a source matching the current debug session
     * from the editor tracker.
     * @param debugSessionPath The path for the current debug session.
     * @param source The source to find.
     */
    private _findInEditors;
    /**
     * Find an editor for a source from the read-only editor tracker.
     * @param source The source to find.
     */
    private _findInReadOnlyEditors;
    private _debuggerService;
    private _debuggerModel;
    private _shell;
    private _readOnlyEditorFactory;
    private _readOnlyEditorTracker;
    private _notebookTracker;
    private _consoleTracker;
    private _editorTracker;
}
/**
 * A namespace for TrackerHandler statics.
 */
export declare namespace TrackerHandler {
    /**
     * The options used to initialize a TrackerHandler object.
     */
    interface IOptions {
        /**
         * The debugger service.
         */
        debuggerService: IDebugger;
        /**
         * The editor services.
         */
        editorServices: IEditorServices;
        /**
         * The application shell.
         */
        shell: JupyterFrontEnd.IShell;
        /**
         * An optional tracker for notebooks.
         */
        notebookTracker?: INotebookTracker;
        /**
         * An optional tracker for consoles.
         */
        consoleTracker?: IConsoleTracker;
        /**
         * An optional tracker for file editors.
         */
        editorTracker?: IEditorTracker;
    }
    /**
     * A class that tracks read only editor widgets used for debugging.
     */
    interface IDebuggerReadOnlyEditorTracker extends IWidgetTracker<MainAreaWidget<CodeEditorWrapper>> {
    }
    /**
     * The Debugger Read Only Editor tracker token.
     * TODO: provide the token for the tracker in the plugin?
     */
    const IDebuggerReadOnlyEditorTracker: Token<IDebuggerReadOnlyEditorTracker>;
}
