import { Session } from '@jupyterlab/services';
import { IDisposable } from '@lumino/disposable';
import { ISignal } from '@lumino/signaling';
import { DebugProtocol } from 'vscode-debugprotocol';
import { IDebugger } from './tokens';
/**
 * A concrete implementation of IDebugger.
 */
export declare class DebuggerService implements IDebugger, IDisposable {
    /**
     * Instantiate a new DebuggerService.
     */
    constructor();
    /**
     * Whether the debug service is disposed.
     */
    get isDisposed(): boolean;
    /**
     * Whether the current debugger is started.
     */
    get isStarted(): boolean;
    /**
     * Returns the current debug session.
     */
    get session(): IDebugger.ISession;
    /**
     * Sets the current debug session to the given parameter.
     * @param session - the new debugger session.
     */
    set session(session: IDebugger.ISession);
    /**
     * Returns the debugger model.
     */
    get model(): IDebugger.IModel;
    /**
     * Sets the debugger model to the given parameter.
     * @param model - The new debugger model.
     */
    set model(model: IDebugger.IModel);
    /**
     * Signal emitted upon session changed.
     */
    get sessionChanged(): ISignal<IDebugger, IDebugger.ISession>;
    /**
     * Signal emitted upon model changed.
     */
    get modelChanged(): ISignal<IDebugger, IDebugger.IModel>;
    /**
     * Signal emitted for debug event messages.
     */
    get eventMessage(): ISignal<IDebugger, IDebugger.ISession.Event>;
    /**
     * Request whether debugging is available for the session connection.
     * @param connection The session connection.
     */
    isAvailable(connection: Session.ISessionConnection): Promise<boolean>;
    /**
     * Dispose the debug service.
     */
    dispose(): void;
    /**
     * Computes an id based on the given code.
     */
    getCodeId(code: string): string;
    /**
     * Whether there exists a thread in stopped state.
     */
    hasStoppedThreads(): boolean;
    /**
     * Starts a debugger.
     * Precondition: !isStarted
     */
    start(): Promise<void>;
    /**
     * Stops the debugger.
     * Precondition: isStarted
     */
    stop(): Promise<void>;
    /**
     * Restarts the debugger.
     * Precondition: isStarted.
     */
    restart(): Promise<void>;
    /**
     * Restore the state of a debug session.
     * @param autoStart - when true, starts the debugger
     * if it has not been started yet.
     */
    restoreState(autoStart: boolean): Promise<void>;
    /**
     * Continues the execution of the current thread.
     */
    continue(): Promise<void>;
    /**
     * Makes the current thread run again for one step.
     */
    next(): Promise<void>;
    /**
     * Makes the current thread step in a function / method if possible.
     */
    stepIn(): Promise<void>;
    /**
     * Makes the current thread step out a function / method if possible.
     */
    stepOut(): Promise<void>;
    /**
     * Update all breakpoints at once.
     * @param code - The code in the cell where the breakpoints are set.
     * @param breakpoints - The list of breakpoints to set.
     * @param path - Optional path to the file where to set the breakpoints.
     */
    updateBreakpoints(code: string, breakpoints: IDebugger.IBreakpoint[], path?: string): Promise<void>;
    /**
     * Clear all the breakpoints for the current session.
     */
    clearBreakpoints(): Promise<void>;
    /**
     * Retrieve the content of a source file.
     * @param source The source object containing the path to the file.
     */
    getSource(source: DebugProtocol.Source): Promise<{
        path: string;
        content: string;
        mimeType?: string;
    }>;
    /**
     * Dump the content of a cell.
     * @param code The source code to dump.
     */
    dumpCell(code: string): Promise<{
        sourcePath: string;
    }>;
    /**
     * Request details for a variable.
     * @param variable The variable for which to request details.
     */
    getVariableDetails(variablesReference: number): Promise<DebugProtocol.Variable[]>;
    /**
     * Get all the frames from the kernel.
     */
    private _getAllFrames;
    /**
     * Handle a change of the current active frame.
     */
    private _onChangeFrame;
    /**
     * Handle a variable expanded event and request variables from the kernel.
     */
    private _onVariableExpanded;
    /**
     * Get all the frames for the given thread id.
     * @param threadId The thread id.
     */
    private _getFrames;
    /**
     * Get all the scopes for the given frame.
     * @param frame The frame.
     */
    private _getScopes;
    /**
     * Get the variables for a given scope.
     * @param scopes The scope.
     */
    private _getVariables;
    /**
     * Set the breakpoints for a given file.
     * @param breakpoints The list of breakpoints to set.
     * @param path The path to where to set the breakpoints.
     */
    private _setBreakpoints;
    /**
     * Map a list of scopes to a list of variables.
     * @param scopes The list of scopes.
     * @param variables The list of variables.
     */
    private _convertScopes;
    /**
     * Clear the current model.
     */
    private _clearModel;
    /**
     * Clear the signals set on the model.
     */
    private _clearSignals;
    /**
     * Get the current thread from the model.
     */
    private _currentThread;
    /**
     * Set the hash parameters for the current session.
     * @param method The hash method.
     * @param seed The seed for the hash method.
     */
    private _setHashParameters;
    /**
     * Set the parameters used for the temporary files (e.g. cells).
     * @param prefix The prefix used for the temporary files.
     * @param suffix The suffix used for the temporary files.
     */
    private _setTmpFileParameters;
    private _isDisposed;
    private _session;
    private _model;
    private _sessionChanged;
    private _modelChanged;
    private _eventMessage;
    private _hashMethod;
    private _tmpFilePrefix;
    private _tmpFileSuffix;
}
