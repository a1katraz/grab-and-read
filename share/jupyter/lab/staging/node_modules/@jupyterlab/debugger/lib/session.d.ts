import { Session } from '@jupyterlab/services';
import { ISignal } from '@lumino/signaling';
import { IDebugger } from './tokens';
/**
 * A concrete implementation of IDebugger.ISession.
 */
export declare class DebugSession implements IDebugger.ISession {
    /**
     * Instantiate a new debug session
     *
     * @param options - The debug session instantiation options.
     */
    constructor(options: DebugSession.IOptions);
    /**
     * Whether the debug session is disposed.
     */
    get isDisposed(): boolean;
    /**
     * A signal emitted when the debug session is disposed.
     */
    get disposed(): ISignal<this, void>;
    /**
     * Returns the API session connection to connect to a debugger.
     */
    get connection(): Session.ISessionConnection;
    /**
     * Sets the API session connection to connect to a debugger to
     * the given parameter.
     *
     * @param connection - The new API session connection.
     */
    set connection(connection: Session.ISessionConnection | null);
    /**
     * Whether the debug session is started
     */
    get isStarted(): boolean;
    /**
     * Signal emitted for debug event messages.
     */
    get eventMessage(): ISignal<IDebugger.ISession, IDebugger.ISession.Event>;
    /**
     * Dispose the debug session.
     */
    dispose(): void;
    /**
     * Start a new debug session
     */
    start(): Promise<void>;
    /**
     * Stop the running debug session.
     */
    stop(): Promise<void>;
    /**
     * Restore the state of a debug session.
     */
    restoreState(): Promise<IDebugger.ISession.Response['debugInfo']>;
    /**
     * Send a custom debug request to the kernel.
     * @param command debug command.
     * @param args arguments for the debug command.
     */
    sendRequest<K extends keyof IDebugger.ISession.Request>(command: K, args: IDebugger.ISession.Request[K]): Promise<IDebugger.ISession.Response[K]>;
    /**
     * Handle debug events sent on the 'iopub' channel.
     * @param sender - the emitter of the event.
     * @param message - the event message.
     */
    private _handleEvent;
    /**
     * Send a debug request message to the kernel.
     * @param msg debug request message to send to the kernel.
     */
    private _sendDebugMessage;
    /**
     * A promise that resolves when the kernel is ready.
     */
    private _ready;
    private _seq;
    private _connection;
    private _isDisposed;
    private _isStarted;
    private _disposed;
    private _eventMessage;
}
/**
 * A namespace for `DebugSession` statics.
 */
export declare namespace DebugSession {
    /**
     * Instantiation options for a `DebugSession`.
     */
    interface IOptions {
        /**
         * The session connection used by the debug session.
         */
        connection: Session.ISessionConnection;
    }
}
