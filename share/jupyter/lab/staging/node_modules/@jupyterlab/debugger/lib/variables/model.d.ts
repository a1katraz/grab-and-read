import { ISignal } from '@lumino/signaling';
import { DebugProtocol } from 'vscode-debugprotocol';
/**
 * A model for a variable explorer.
 */
export declare class VariablesModel {
    /**
     * Get all the scopes.
     */
    get scopes(): VariablesModel.IScope[];
    /**
     * Set the scopes.
     */
    set scopes(scopes: VariablesModel.IScope[]);
    /**
     * Signal emitted when the current variable has changed.
     */
    get changed(): ISignal<this, void>;
    /**
     * Signal emitted when the current variable has been expanded.
     */
    get variableExpanded(): ISignal<this, VariablesModel.IVariable>;
    /**
     * Expand a variable.
     * @param variable The variable to expand.
     */
    expandVariable(variable: VariablesModel.IVariable): void;
    private _state;
    private _variableExpanded;
    private _changed;
}
/**
 * A namespace for VariablesModel `statics`.
 */
export declare namespace VariablesModel {
    /**
     * An interface for a variable.
     */
    interface IVariable extends DebugProtocol.Variable {
        /**
         * Whether the variable is expanded.
         */
        expanded?: boolean;
    }
    /**
     * An interface for a scope.
     */
    interface IScope {
        /**
         * The name of the scope.
         */
        name: string;
        /**
         * The list of variables.
         */
        variables: IVariable[];
    }
}
