// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
import { ReactWidget } from '@jupyterlab/apputils';
import React, { useEffect, useState } from 'react';
/**
 * The body for a Breakpoints Panel.
 */
export class BreakpointsBody extends ReactWidget {
    /**
     * Instantiate a new Body for the Breakpoints Panel.
     * @param model The model for the breakpoints.
     */
    constructor(model) {
        super();
        this._model = model;
        this.addClass('jp-DebuggerBreakpoints-body');
    }
    /**
     * Render the BreakpointsComponent.
     */
    render() {
        return React.createElement(BreakpointsComponent, { model: this._model });
    }
}
/**
 * A React component to display a list of breakpoints.
 * @param model The model for the breakpoints.
 */
const BreakpointsComponent = ({ model }) => {
    const [breakpoints, setBreakpoints] = useState(Array.from(model.breakpoints.entries()));
    useEffect(() => {
        const updateBreakpoints = (_, updates) => {
            setBreakpoints(Array.from(model.breakpoints.entries()));
        };
        const restoreBreakpoints = (_) => {
            setBreakpoints(Array.from(model.breakpoints.entries()));
        };
        model.changed.connect(updateBreakpoints);
        model.restored.connect(restoreBreakpoints);
        return () => {
            model.changed.disconnect(updateBreakpoints);
            model.restored.disconnect(restoreBreakpoints);
        };
    });
    return (React.createElement(React.Fragment, null, breakpoints.map(entry => (React.createElement(BreakpointCellComponent, { key: entry[0], breakpoints: entry[1], model: model })))));
};
/**
 * A React Component to display breakpoints grouped by source file.
 * @param breakpoints The list of breakpoints.
 * @param model The model for the breakpoints.
 */
const BreakpointCellComponent = ({ breakpoints, model }) => {
    return (React.createElement(React.Fragment, null, breakpoints
        .sort((a, b) => {
        return a.line - b.line;
    })
        .map((breakpoint, index) => (React.createElement(BreakpointComponent, { key: breakpoint.source.path + index, breakpoint: breakpoint, model: model })))));
};
/**
 * A React Component to display a single breakpoint.
 * @param breakpoints The breakpoint.
 * @param model The model for the breakpoints.
 */
const BreakpointComponent = ({ breakpoint, model }) => {
    return (React.createElement("div", { className: `jp-DebuggerBreakpoint`, onClick: () => model.clicked.emit(breakpoint), title: breakpoint.source.path },
        React.createElement("span", { className: 'jp-DebuggerBreakpoint-marker' }, "\u25CF"),
        React.createElement("span", { className: 'jp-DebuggerBreakpoint-source jp-left-truncated' }, breakpoint.source.path),
        React.createElement("span", { className: 'jp-DebuggerBreakpoint-line' }, breakpoint.line)));
};
