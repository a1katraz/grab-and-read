// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
import { ReactWidget } from '@jupyterlab/apputils';
import { ArrayExt } from '@lumino/algorithm';
import React, { useEffect, useState } from 'react';
import { variableIcon } from '../icons';
import { CommandIDs } from '..';
/**
 * The body for a table of variables.
 */
export class VariablesBodyTable extends ReactWidget {
    /**
     * Instantiate a new Body for the table of variables.
     * @param options The instantiation options for a VariablesBodyTable.
     */
    constructor(options) {
        super();
        this._scopes = [];
        this._filter = new Set();
        this._commands = options.commands;
        const model = options.model;
        model.changed.connect(this._updateScopes, this);
        this.addClass('jp-DebuggerVariables-body');
    }
    /**
     * Render the VariablesComponent.
     */
    render() {
        return (React.createElement(React.Fragment, null, this._scopes.map(scope => (React.createElement(VariablesComponent, { key: scope.name, data: scope.variables, commands: this._commands, filter: this._filter })))));
    }
    /**
     * Set the variable filter list.
     */
    set filter(filter) {
        this._filter = filter;
        this.update();
    }
    /**
     * Update the scopes and the table of variables.
     * @param model The variables model.
     */
    _updateScopes(model) {
        if (ArrayExt.shallowEqual(this._scopes, model.scopes)) {
            return;
        }
        this._scopes = model.scopes;
        this.update();
    }
}
/**
 * A widget to display details for a variable.
 */
export class VariableDetails extends ReactWidget {
    /**
     * Instantiate a new Body for the detail table of the selected variable.
     * @param options The instantiation options for VariableDetails.
     */
    constructor(options) {
        var _a, _b;
        super();
        this._variables = [];
        const { details, commands, model, service, title } = options;
        this.title.icon = variableIcon;
        this.title.label = `${(_b = (_a = service.session) === null || _a === void 0 ? void 0 : _a.connection) === null || _b === void 0 ? void 0 : _b.name} - ${title}`;
        this.title.caption = this.title.label;
        this._variables = details;
        this._commands = commands;
        model.changed.connect(this._onModelChanged, this);
        this.addClass('jp-DebuggerVariableDetails');
    }
    /**
     * Render the VariablesComponent.
     */
    render() {
        return (React.createElement(VariablesComponent, { data: this._variables, commands: this._commands }));
    }
    /**
     * Handle when the debug model changes.
     */
    _onModelChanged() {
        this.dispose();
    }
}
/**
 * A React component to display a table of variables.
 * @param data An array of variables.
 * @param service The debugger service.
 * @param filter Optional variable filter list.
 */
const VariablesComponent = ({ data, commands, filter }) => {
    const [variables, setVariables] = useState(data);
    const [selected, setSelected] = useState(null);
    useEffect(() => {
        setVariables(data);
    }, [data]);
    const onVariableClicked = (variable) => {
        if (selected === variable) {
            return;
        }
        setSelected(variable);
    };
    const onVariableDoubleClicked = async (variable) => {
        setSelected(variable);
        await commands.execute(CommandIDs.variableDetails, {
            variableReference: variable.variablesReference,
            title: variable.evaluateName
        });
    };
    const Tbody = (variables) => {
        var _a;
        return (React.createElement("tbody", null, (_a = variables) === null || _a === void 0 ? void 0 : _a.filter(variable => { var _a; return !((_a = filter) === null || _a === void 0 ? void 0 : _a.has(variable.evaluateName)); }).map(variable => (React.createElement("tr", { onDoubleClick: () => onVariableDoubleClicked(variable), onClick: () => onVariableClicked(variable), key: `${variable.evaluateName}-${variable.type}-${variable.value}` },
            React.createElement("td", null, variable.name),
            React.createElement("td", null, variable.type),
            React.createElement("td", { className: selected === variable ? 'selected' : '' }, variable.value))))));
    };
    return (React.createElement("table", null,
        React.createElement("thead", null,
            React.createElement("tr", null,
                React.createElement("th", null, "Name"),
                React.createElement("th", null, "Type"),
                React.createElement("th", null, "Value"))),
        Tbody(variables)));
};
