// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
import { bugIcon } from '@jupyterlab/ui-components';
import { Panel, SplitPanel, Widget } from '@lumino/widgets';
import { Breakpoints } from './breakpoints';
import { Callstack } from './callstack';
import { DebuggerModel } from './model';
import { Sources } from './sources';
import { Variables } from './variables';
/**
 * A namespace for `Debugger` statics.
 */
export var Debugger;
(function (Debugger) {
    /**
     * A debugger sidebar.
     */
    class Sidebar extends Panel {
        /**
         * Instantiate a new Debugger.Sidebar
         * @param options The instantiation options for a Debugger.Sidebar
         */
        constructor(options) {
            super();
            this.id = 'jp-debugger-sidebar';
            this.title.iconRenderer = bugIcon;
            this.addClass('jp-DebuggerSidebar');
            const { callstackCommands, editorServices, service } = options;
            this.model = new DebuggerModel();
            this.service = service;
            this.service.model = this.model;
            this.variables = new Variables({
                model: this.model.variables,
                commands: callstackCommands.registry,
                service
            });
            this.callstack = new Callstack({
                commands: callstackCommands,
                model: this.model.callstack
            });
            this.breakpoints = new Breakpoints({
                service,
                model: this.model.breakpoints
            });
            this.sources = new Sources({
                model: this.model.sources,
                service,
                editorServices
            });
            const header = new Sidebar.Header();
            this.addWidget(header);
            this.model.titleChanged.connect((_, title) => {
                header.title.label = title;
            });
            const body = new SplitPanel();
            body.orientation = 'vertical';
            body.addWidget(this.variables);
            body.addWidget(this.callstack);
            body.addWidget(this.breakpoints);
            body.addWidget(this.sources);
            body.addClass('jp-DebuggerSidebar-body');
            this.addWidget(body);
        }
        /**
         * Dispose the sidebar.
         */
        dispose() {
            if (this.isDisposed) {
                return;
            }
            this.model.dispose();
            this.service.model = null;
            super.dispose();
        }
    }
    Debugger.Sidebar = Sidebar;
    /**
     * A namespace for Sidebar `statics`
     */
    (function (Sidebar) {
        /**
         * The header for a debugger sidebar.
         */
        class Header extends Widget {
            /**
             * Instantiate a new sidebar header.
             */
            constructor() {
                super({ node: Private.createHeader() });
                this.title.changed.connect(_ => {
                    this.node.querySelector('h2').textContent = this.title.label;
                });
            }
        }
        Sidebar.Header = Header;
    })(Sidebar = Debugger.Sidebar || (Debugger.Sidebar = {}));
})(Debugger || (Debugger = {}));
/**
 * A namespace for private module data.
 */
var Private;
(function (Private) {
    /**
     * Create a sidebar header node.
     */
    function createHeader() {
        const header = document.createElement('header');
        const title = document.createElement('h2');
        title.textContent = '-';
        title.classList.add('jp-left-truncated');
        header.appendChild(title);
        return header;
    }
    Private.createHeader = createHeader;
})(Private || (Private = {}));
